require 'rails_helper'

RSpec.describe User, type: :model do
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–π
  describe "Validations" do
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    describe "Name" do
      # –ö–æ–≥–¥–∞ –∏–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é
      context "when name is invalid" do
        it "is not valid without a name" do
          user = build(:user, name: nil)
          expect(user).not_to be_valid
        end
  
        it "is invalid with a name longer than 50 characters" do
          user = build(:user, name: "e" * 51)
          expect(user).not_to be_valid
        end
  
        it "is invalid with a name shorter than 2 characters" do
          user = build(:user, name: "e")
          expect(user).not_to be_valid
        end

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context "when name has incorrect format" do
          it "is invalid with numbers" do
            user = build(:user, name: "123456789")
            expect(user).not_to be_valid
          end

          it "is invalid with special characters" do
            user = build(:user, name: "Anna&#$%")
            expect(user).not_to be_valid
          end
        end
      end

      # –ö–æ–≥–¥–∞ –∏–º—è –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é
      context "when name is valid" do
        it "is valid with cyrillic letters" do
          user = build(:user, name: "–ö–∏—Ä–∏–ª")
          expect(user).to be_valid
        end

        it "is valid with latin letters" do
          user = build(:user, name: "Anna")
          expect(user).to be_valid
        end

        it "is valid with permissible characters (' and -)" do
          user = build(:user, name: "D'Artagnan-Luc")
          expect(user).to be_valid
        end
      end
    end

  
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã
    describe "Email" do
      context "when email is invalid" do
        it "is not valid without a email" do
          user = build(:user, email: nil)
          expect(user).not_to be_valid
        end

        it "is invalid with a duplicate email" do
          build(:user, email: "test@example.com")
          new_user = build(:user, email: "test@example.com")
          expect(new_user).not_to be_valid
        end

        it "is invalid with an email longer than 254 characters" do
          user = build(:user, email: "a" * 255 + "@example.com")
          expect(user).not_to be_valid
        end

        it "is invalid with an email shorter than 5 characters" do
          user = build(:user, email: "a@b.c")
          expect(user).not_to be_valid
        end

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã
        context "when email has incorrect format" do
          it "is invalid without '@' symbol" do
            user = build(:user, email: "invalidemail.com")
            expect(user).not_to be_valid
          end

          it "is invalid without domain" do
            user = build(:user, email: "test@")
            expect(user).not_to be_valid
          end

          it "is invalid with a missing local part before @" do
            user = build(:user, email: "@domain.com")
            expect(user).not_to be_valid
          end

          it "is invalid with spaces" do
            user = build(:user, email: "test @example.com")
            expect(user).not_to be_valid
          end

          it "is invalid with special characters" do
            user = build(:user, email: "test!#$%@example.com")
            expect(user).not_to be_valid
          end
        end
      end
    end


    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
    describe "Password" do
      # –ö–æ–≥–¥–∞ –ø–∞—Ä–æ–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é
      context "when email is invalid" do
        it "is invalid when password and confirmation do not match" do
          user = build(:user, password: "Ab123456", password_confirmation: "Ba654321")
          expect(user).not_to be_valid
        end

        it "is not valid without a password" do
          user = build(:user, password: nil)
          expect(user).not_to be_valid
        end

        it "is not valid without a password confirmation" do
          user = build(:user, password_confirmation: nil)
          expect(user).not_to be_valid
        end

        it "is invalid if password is too short" do
          user = build(:user, password: "Aa1", password_confirmation: "Aa1")
          expect(user).not_to be_valid
        end

        it "is invalid if password is too long" do
          long_password = "A" * 73
          user = build(:user, password: long_password, password_confirmation: long_password)
          expect(user).not_to be_valid
        end

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –ø–∞—Ä–æ–ª—è
        context "when password has incorrect format" do
          it "is invalid without a digit" do
            password = "HelloWorld"
            user = build(:user, password: password, password_confirmation: password)
            expect(user).not_to be_valid
          end

          it "is invalid without an uppercase letter" do
            password = "helloworld123"
            user = build(:user, password: password, password_confirmation: password)
            expect(user).not_to be_valid
          end

          it "is invalid without a lowercase letter" do
            password = "HELLOWORLD123"
            user = build(:user, password: password, password_confirmation: password)
            expect(user).not_to be_valid
          end
        end 
      end
    end

    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–æ–ª–∏
    describe "Role" do
      # –ö–æ–≥–¥–∞ —Ä–æ–ª—å –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–π—Ç–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é
      context "when role is valid" do
        it "allows 'customer' as a role" do
          user = build(:user, role: "customer")
          expect(user).to be_valid
        end

        it "allows 'admin' as a role" do
          user = build(:user, role: "admin")
          expect(user).to be_valid
        end
      end

      # –ö–æ–≥–¥–∞ —Ä–æ–ª—å –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–π—Ç–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é
      context "when role is invalid" do
        it "is invalid without a role" do
          user = build(:user, role: nil)
          expect(user).not_to be_valid
          expect(user.errors[:role]).to include("can't be blank")
        end

        it "is invalid with an unknown role" do
          user = build(:user, role: "moderator")
          expect(user).not_to be_valid
          expect(user.errors[:role]).to include("is not included in the list")
        end
      end
    end
  end

  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–±–µ–∫–æ–≤
  describe "Callbacks" do
    let(:user) { build(:user, email: " TeST@Example.com ", name: "–∂–∞–Ω –ø–æ–ª—å") }
    
    it "normalizes email before saving" do
      user.save
      expect(user.email).to eq("test@example.com")
    end

    it "capitalizes name before saving" do
      user.save
      expect(user.name).to eq("–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤")
    end
  end

  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–π
  describe "Associations" do
    it { should have_many(:orders) }
    it { should have_one(:cart) }
  end

  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è
  describe "Password encryption" do
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ password_digest —Å–æ–∑–¥–∞–µ—Ç—Å—è
    describe "Password encryption" do
      let(:user) { create(:user, password: "Password123", password_confirmation: "SecurePass123") }
  
      it "encrypts the password" do
        expect(user.password_digest).to be_present
        expect(user.password_digest).not_to eq("Password123")
      end
    end

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –º–µ—Ç–æ–¥ authenticate —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    describe "Password authentication" do
      let(:user) { create(:user, password: "Password123", password_confirmation: "SecurePass123") }
  
      it "authenticates with correct password" do
        expect(user.authenticate("Password123")).to eq(user)
      end
  
      it "fails authentication with incorrect password" do
        expect(user.authenticate("WrongPassword")).to be_falsey
      end
    end

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ–ª—è –∑–∞–ø–∏—Å–∞—Ç—å –ø–∞—Ä–æ–ª—å –Ω–∞–ø—Ä—è–º—É—é –≤ password_digest
    describe "Security" do
      it "does not allow direct assignment of password_digest" do
        user = build(:user)
        expect { user.password_digest = "fakehash" }.to raise_error(ActiveModel::MassAssignmentSecurity::Error).or change { user.password_digest }.by(nil)
      end
    end
  end

  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–µ–π
  describe "Role validation" do
    it "allows valid roles"
    it "rejects invalid roles"
  end

  # üìå –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–±—Ä–∏–∫–∏ FactoryBot
  describe "FactoryBot" do
    it "creates a valid user"
    it "creates multiple users with unique emails"
    it "creates an admin user using trait"
  end
end


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–π
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–π
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–±–µ–∫–æ–≤ (before_save)
# –ü—Ä–æ–≤–µ—Ä–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è
# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–µ–π
# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–±—Ä–∏–∫–∏